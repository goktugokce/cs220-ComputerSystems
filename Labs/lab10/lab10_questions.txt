1. Looking at the x86 code derived from the factorial function in fact.c, 
	what is the offset from %rbp of:
	
	A. the caller's %rbp value : 0
	B. the parameter "n" : -0x14
	C. the variable "answer" : -0x4
	D. the return address if a lower level function is invoked: -0x28
	
2. If you look at the stack.txt file produced by the Makefile, you will notice
	that the first stack dump that is produced occurs when factorial(1) has 
	been called, even though main called factorial(4). Why is this true?
	:  Because, to finish factorial function it has to finish recursion first, therefore,
       in case of n=4, it has to starm from n=4 and go to n=3,n=2 and finally
       n=1.
	
3. Looking at stack.txt at the top, when n==1, the top (highest address) 
	stack frame is main's stack frame. Look at the next stack frame, the 
	first frame that represents an invocation of the factorial function.
	
	A. What is the value of the parameter, "n" :  4
	B. What is the value of the "answer" variable (in hex) :  badddadd
	
4. Looking at stack.txt when n==1, the bottom (lowest address) stack frame is
	also an invocation of the factorial function. In this frame,
	
	A. What is the value of the parameter, "n" :  1
	B. What is the value of the "answer" variable (in hex) :  00000001
	
5. Looking at stack.txt when n=4, the bottom (lowest address) stack frame is
	still an invocation of the factorial function. In this frame,
	
	A. What is the value of the parameter, "n" :  4
	B. What is the value of the "answer" variable (in hex) :  000000018
	
6. The stack.c code that prints lines of stack frames prints several values on
	a single line. First, it prints the address of the memory, followed by an 
	arrow (->), followed by the 8 byte (64 bit) big endian interpretation of the
	value at that memory, followed by an equals sign (=), followed by the big
	endian interpretation of two 4 byte (32 bit) values at that memory.
	
	If one line of output looks like:
	
	0x7ffcd76991d8 -> badddadd00000000 = 00000000 badddadd		
	
	Why do the 4 byte values look reversed?
	
	: It means our machine is little endian, therefore it is reversed.
	
	
	
7. If you run "make stack.txt" twice, will you get the same results? Why or
	why not?
	
	: No, Because addresses which are pointing the stack will change, therefore, in txt, address variables will change.
	
	
	
8. In stack.c, in the printStackInfo function, when we print the frames, we use
	the statement "for(j=nptrs-3;j>0; j--)".
	
	A. Why do we start with the frame at nptrs-3?
	
	: To get the main fuction frame info.(Start from the main function)
	
	
	
	B. Why do we end with the frame at 1, and not 0?
	
	: To not print info of printStackInfo frame.
	
	
	
9. The Makefile builds the fact binary using the -rdynamic flag as a gcc 
	compiler option. If we do not specify that flag when we compile, will the 
	code still compile and run? If so, does anything change in the stack.txt
	output file other than the changes already identified in question 7?
	
	: in txt file rather than addresses, ./fact(factorial+number1) and ./fact(main+number2)
      instructions changes. Because backtrace do not call malloc explicitly as I read from link in the code(fact.s).
	
	
10. In stack.c, we used the special keyword 'asm ("rbp")' to enable us to use
	the %rbp register as a C variable. Can you think of any other reasons to
	get access to x86 registers in C code? If so, name one or two...
	
	: we can access to %rsp to modify redzone
