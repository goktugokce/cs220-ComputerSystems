1. Set a breakpoint at line 14, and stop when you get there, and answer the
	following questions...
	
	A. What is the highest address in the stack frame (the top of the
		frame)? : rsp-> 0x7fffffffe760
	B. What is the lowest address in the stack frame (the bottom of the
		frame)? : rbp -> 0x7fffffffe780
	C. What is the size of main's stack frame (including the 8 bytes pointed
		to by %rbp)? : 0x20
	D. Does the "main" function use the red zone? : 
		If so, why can main use the red zone? : 
		If not, why not? : Because, it does not modify rsp.
			
	E. Several values are kept in main's stack frame. Complete the following
		table:
		
		Variable | Offset from %rbp | gdb display cmd | Current Value  | 
		---------+------------------+-----------------+----------------+
		argc     |     -0x14        | x /dw $rbp-0x14 |       2         | 
		argv     |     -0x20        | x /xw $rbp-0x20 |    0xffffe7f8   |
		n	     |     -0x4         | x /dw $rbp-0x4  |        6        |
			
	Note: Since we are in the main function, and have been called by the 
	operating system, and the operating system does not follow all of the
	expected conventions, we cannot ask questions about main's CALLER's 
	stack frame.
			
	2. Set a breakpoint at line 28 in fib.c when the parameter "n" has a 
		value of 3. (Note... make sure this is the FIRST time you have
		gotten to line 20 with n==3. If not, you will get the wrong answers.)
		
	A. What is the highest address in the stack frame (the top of the
		frame)? : rsp-> 0x7fffffffe760 
	B. What is the lowest address in the stack frame (the bottom of the
		frame)? : rbp -> 0x7fffffffe780 
	C. What is the size of fib's stack frame (including the 8 bytes pointed
		to by %rbp)? :  
	D. Does the "fib" function use the red zone? :  
		If so, why can main use the red zone? :  
		If not, why not? : no rsp modification
			 
	E. Several values are kept in fib's stack frame. Complete the following
		table:
		
		Variable | Offset from %rbp | gdb display cmd | Current Value  | 
		---------+------------------+-----------------+----------------+
		n        |     0x14         | x /dw $rbp-0x14 |       3        | 
		answer   |     0x4          | x /dw $rbp-0x4  |       0        |
		n1       |     0xc          | x /dw $rbp-0xc  |       1        |	
		n2       |     0x8          | x /dw $rbp-0x8  |       1        |
		
3. Still at this same breakpoint, but now concentrating on the SECOND stack 
	frame, ABOVE the current stack frame (the caller's stack frame)
			
	A. What is the highest address in the caller's stack frame (the top of the
		caller's stack frame?) : 0x7fffffffe630 
	B. What is the lowest address in the caller's stack frame (the bottom of
		the caller's stack frame?) : 0x7fffffffe650	 
	C. What is the return address for the current function? :  
	D. What line of C code does the return address come from? :  
	E. Several values are found in the fib stack frame ABOVE the current stack
		frame. HINT: I used the gdb command "set $crbp = 0x7fffffffe3b0" to
		make it easy to reference my caller's %rbp. Using the caller's stack 
		frame, complete the following table:
		
		Variable | Offset from %rbp | gdb display cmd | Current Value  | 
		---------+------------------+-----------------+----------------+
		n        |     0x44         | x/dw $rbp-0x44  |      2         | 
		answer   |     0x34         | x/dw $rbp-0x34  |   	 1         |
		n1	 |         0x3c         | x/dw $rbp-0x3c  |      1         |	
		n2       |     0x38         | x/dw $rbp-0x38  |      0         |	
		
4. Still at this same breakpoint, but now concentrating on the THIRD stack
	frame, the caller's caller's stack frame.		
		
	A. What is the highest address in the caller's caller's stack frame?
		:  0x7fffffffe600
	B. What is the lowest address in the caller's caller's stack frame (the 
		bottom of the caller's caller's stack frame?) : 0x7fffffffe620	 
	C. What is the return address for the current function? :  
	D. What line of C code does the return address come from? : 
	E. What is the value of "n" in the caller's caller's stack frame?
		:  1
		
5. Still at this same breakpoint... no point in continuing up the stack frames,
	you should get an idea of what is going on by now. Instead, to summarize,
	look at the result of a gdb "where" command:
	
	A. Which line of the gdb "where" output is associated with the current stack
		frame; #0, #1, #2, or #3? : #1
	B. Which line of the gdb "where" output is assocaited with the caller's 
		stack frame; #0, #1, #2, or #3? : #2 
	C. Which line of the gdb "where" output is associated with the caller's 
		caller's stack frame; #0, #1, #2, or #3? : #3  
		
6. Extra credit: If lines 27 and 26 are switched in fib.c, and you set a break
	point at line 28 the first time n has a value of 3, what would the results 
	of the gdb "where" command look like?
        stack frames would change, #4 would be caller's caller's caller's stack frame, #3 would be caller's caller's frame, #2 would be caller's stack frame and the last #1 would be function's stack frame
